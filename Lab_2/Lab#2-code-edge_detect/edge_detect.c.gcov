        -:    0:Source:edge_detect.c
        -:    0:Graph:./edge_detect_def_cov.gcno
        -:    0:Data:./edge_detect_def_cov.gcda
        -:    0:Runs:1
        -:    1:/* This program detects the edges in a 256 gray-level 128 x 128 pixel image.
        -:    2:   The program relies on a 2D-convolution routine to convolve the image with
        -:    3:   kernels (Sobel operators) that expose horizontal and vertical edge
        -:    4:   information.
        -:    5:
        -:    6:   The following is a block diagram of the steps performed in edge detection,
        -:    7:
        -:    8:
        -:    9:            +---------+       +----------+
        -:   10:   Input    |Smoothing|       |Horizontal|-------+
        -:   11:   Image -->| Filter  |---+-->| Gradient |       |
        -:   12:            +---------+   |   +----------+  +----x-----+   +---------+  Binary
        -:   13:                          |                 | Gradient |   |  Apply  |  Edge
        -:   14:                          |                 | Combining|-->|Threshold|->Detected
        -:   15:                          |   +----------+  +----x-----+   +----x----+  Output
        -:   16:                          |   | Vertical |       |              |
        -:   17:                          +-->| Gradient |-------+              |
        -:   18:                              +----------+                   Threshold
        -:   19:                                                               Value
        -:   20:
        -:   21:
        -:   22:    This program is based on the routines and algorithms found in the book
        -:   23:    "C Language Algorithms for Digital Signal Processing" by P.M. Embree
        -:   24:    and B. Kimble.
        -:   25:
        -:   26:    Copyright (c) 1992 -- Mazen A.R. Saghir -- University of Toronto */
        -:   27:/* Modified to use arrays - SMP */
        -:   28:
        -:   29://#include "traps.h"
        -:   30:
        -:   31:/*
        -:   32:* This is a variant of the original edge detection benchmark with the following 
        -:   33:* modifications:
        -:   34:* - all computations were encapsulated in functions and the main exclusively 
        -:   35:* 	consists now of calls to functions
        -:   36:* - parameterized capabilities are now define parameters, being N the size
        -:   37:*	of the squared images used
        -:   38:*/
        -:   39:
        -:   40:
        -:   41:#define         K       3 // fixed value
        -:   42:#define         N       1024 //512 //128
        -:   43:#define         T       127 // fixed value
        -:   44:
        -:   45:// for now we only use squared images
        -:   46:int image_buffer1[N][N];
        -:   47:int image_buffer2[N][N];
        -:   48:int image_buffer3[N][N];
        -:   49:int filter[K][K];
        -:   50:
        -:   51:void convolve2d(int input_image[N][N], int kernel[K][K], int output_image[N][N]);
        -:   52:
        -:   53:void initialize(int image_buffer2[N][N], int image_buffer3[N][N]);
        -:   54:
        -:   55:void combthreshold(int image_buffer1[N][N], int image_buffer2[N][N], int image_buffer3[N][N]);
        -:   56:
        -:   57:void initcoeff1(int filter[K][K]);
        -:   58:
        -:   59:void initcoeff2(int filter[K][K]);
        -:   60:
        -:   61:void initcoeff3(int filter[K][K]);
        -:   62:	
        1:   63:main()
        -:   64:{
        -:   65:
        -:   66:  /* Read input image. */
        1:   67:  input_dsp(image_buffer1, N*N, 1);
        -:   68:
        -:   69:
        -:   70:  /* Initialize image_buffer2 and image_buffer3 */
        1:   71:  initialize(image_buffer2, image_buffer3);
        -:   72:
        -:   73:
        -:   74:/* Set the values of the filter matrix to a Gaussian kernel.
        -:   75:   This is used as a low-pass filter which blurs the image so as to
        -:   76:   de-emphasize the response of some isolated points to the edge
        -:   77:   detection (Sobel) kernels. */
        -:   78: 
        1:   79:  initcoeff1(filter);
        -:   80:
        -:   81:
        -:   82:  /* Perform the Gaussian convolution. */
        -:   83:
        1:   84:  convolve2d(image_buffer1, filter, image_buffer3);
        -:   85:
        -:   86:  /* Set the values of the filter matrix to the vertical Sobel operator. */
        -:   87:
        1:   88:  initcoeff2(filter);
        -:   89:  
        -:   90:  /* Convolve the smoothed matrix with the vertical Sobel kernel. */
        -:   91:
        1:   92:  convolve2d(image_buffer3, filter, image_buffer1);
        -:   93:
        -:   94:  /* Set the values of the filter matrix to the horizontal Sobel operator. */
        -:   95:
        1:   96:  initcoeff3(filter);
        -:   97:  
        -:   98:  /* Convolve the smoothed matrix with the horizontal Sobel kernel. */
        -:   99:
        1:  100:  convolve2d(image_buffer3, filter, image_buffer2);
        -:  101:
        -:  102:  /* Take the larger of the magnitudes of the horizontal and vertical
        -:  103:     matrices. Form a binary image by comparing to a threshold and
        -:  104:     storing one of two values. */
        -:  105:     
        1:  106:  combthreshold(image_buffer1, image_buffer2, image_buffer3);
        -:  107:
        -:  108:
        -:  109:  /* Store binary image. */
        -:  110:  //output_dsp(image_buffer1, N*N, 1);
        -:  111:  //output_dsp(image_buffer2, N*N, 1);
        1:  112:  output_dsp(image_buffer3, N*N, 1);
        -:  113: // output_dsp(filter, K*K, 1);
        -:  114:}
        -:  115:
        -:  116:
        -:  117:
        1:  118:void initialize(int image_buffer2[N][N], int image_buffer3[N][N]) {
        -:  119:     int i, j;
        -:  120:
     1025:  121:  for (i = 0; i < N; i++) {
  1049600:  122:    for (j = 0; j < N; j++) {
  1048576:  123:       image_buffer2[i][j] = 0;
        -:  124:       //printf("address: %d\n", &image_buffer2[i][j]);
  1048576:  125:       image_buffer3[i][j] = 0;
        -:  126:     }
        -:  127:  }
        1:  128:}
        -:  129:
        1:  130:void initcoeff1(int filter[K][K]) {
        1:  131:  filter[0][0] = 1;
        1:  132:  filter[0][1] = 2;
        1:  133:  filter[0][2] = 1;
        1:  134:  filter[1][0] = 2;
        1:  135:  filter[1][1] = 4;
        1:  136:  filter[1][2] = 2;
        1:  137:  filter[2][0] = 1;
        1:  138:  filter[2][1] = 2;
        1:  139:  filter[2][2] = 1;
        1:  140:}
        -:  141:
        1:  142:void initcoeff2(int filter[K][K]) {
        1:  143:  filter[0][0] =  1;
        1:  144:  filter[0][1] =  0;
        1:  145:  filter[0][2] = -1;
        1:  146:  filter[1][0] =  2;
        1:  147:  filter[1][1] =  0;
        1:  148:  filter[1][2] = -2;
        1:  149:  filter[2][0] =  1;
        1:  150:  filter[2][1] =  0;
        1:  151:  filter[2][2] = -1;
        1:  152:}
        -:  153:
        1:  154:void initcoeff3(int filter[K][K]) {
        1:  155:  filter[0][0] =  1;
        1:  156:  filter[0][1] =  2;
        1:  157:  filter[0][2] =  1;
        1:  158:  filter[1][0] =  0;
        1:  159:  filter[1][1] =  0;
        1:  160:  filter[1][2] =  0;
        1:  161:  filter[2][0] = -1;
        1:  162:  filter[2][1] = -2;
        1:  163:  filter[2][2] = -1;
        1:  164:}
        -:  165:
        1:  166:void combthreshold(int image_buffer1[N][N], int image_buffer2[N][N], int  image_buffer3[N][N]) {
        -:  167:
        -:  168:  int i,j;
        -:  169:
        -:  170:  int temp1;
        -:  171:  int temp2;
        -:  172:  int temp3;
        -:  173:
     1025:  174:  for (i = 0; i < N; i++) {
  1049600:  175:    for (j = 0; j < N; ++j) {
  1048576:  176:       temp1 = abs(image_buffer1[i][j]);
  1048576:  177:       temp2 = abs(image_buffer2[i][j]);
  1048576:  178:       temp3 = (temp1 > temp2) ? temp1 : temp2;
  1048576:  179:       image_buffer3[i][j] = (temp3 > T) ? 255 : 0;
        -:  180:     }
        -:  181:  }
        1:  182:}
        -:  183:
        -:  184:/* This function convolves the input image by the kernel and stores the result
        -:  185:   in the output image. */
        -:  186:
        3:  187:void convolve2d(int input_image[N][N], int kernel[K][K], int output_image[N][N])
        -:  188:{
        -:  189:  int i;
        -:  190:  int j;
        -:  191:  int c;
        -:  192:  int r;
        -:  193:  int normal_factor;
        -:  194:  int sum;
        -:  195:  int dead_rows;
        -:  196:  int dead_cols;
        -:  197:
        -:  198:  /* Set the number of dead rows and columns. These represent the band of rows
        -:  199:     and columns around the edge of the image whose pixels must be formed from
        -:  200:     less than a full kernel-sized compliment of input image pixels. No output
        -:  201:     values for these dead rows and columns since  they would tend to have less
        -:  202:     than full amplitude values and would exhibit a "washed-out" look known as
        -:  203:     convolution edge effects. */
        -:  204:
        3:  205:  dead_rows = K / 2;
        3:  206:  dead_cols = K / 2;
        -:  207:
        -:  208:  /* Calculate the normalization factor of the kernel matrix. */
        -:  209:
        3:  210:  normal_factor = 0;
       12:  211:  for (r = 0; r < K; r++) {
       36:  212:    for (c = 0; c < K; c++) {
       27:  213:      normal_factor += abs(kernel[r][c]);
        -:  214:    }
        -:  215:  }
        -:  216:
        3:  217:  if (normal_factor == 0)
    #####:  218:    normal_factor = 1;
        -:  219:
        -:  220:  /* Convolve the input image with the kernel. */
     3069:  221:  for (r = 0; r < N - K + 1; r++) {
  3136518:  222:    for (c = 0; c < N - K + 1; c++) {
  3133452:  223:      sum = 0;
 12533808:  224:      for (i = 0; i < K; i++) {
 37601424:  225:        for (j = 0; j < K; j++) {
 28201068:  226:          sum += input_image[r+i][c+j] * kernel[i][j];
        -:  227:        }
        -:  228:      }
  3133452:  229:      output_image[r+dead_rows][c+dead_cols] = (sum / normal_factor);
        -:  230:    }
        -:  231:  }
        3:  232:}
